psql -U postgres
Some interesting flags (to see all, use -h or --help depending on your psql version):
	• -E: will describe the underlaying queries of the \ commands (cool for learning!)
	• -l: psql will list all databases and then exit (useful if the user you connect with doesn't has a default database, like at AWS RDS)
Most \d commands support additional param of __schema__.name__ and accept wildcards like *.*
	• \q: Quit/Exit
	• \c __database__: Connect to a database
	• \d __table__: Show table definition including triggers
	• \l: List databases
	• \dy: List events
	• \df: List functions
	• \di: List indexes
	• \dn: List schemas
	• \dt *.*: List tables from all schemas (if *.* is omitted will only show SEARCH_PATH ones)
	• \dv: List views
	• \df+ __function__ : Show function SQL code.
	• \x: Pretty-format query results instead of the not-so-useful ASCII tables
	• \copy (SELECT * FROM __table_name__) TO 'file_path_and_name.csv' WITH CSV: Export a table as CSV
User Related:
	• \du: List users
	• \du __username__: List a username if present.
	• create role __test1__: Create a role with an existing username.
	• create role __test2__ noinherit login password __passsword__;: Create a role with username and password.
	• set role __test__;: Change role for current session to __test__.
	• grant __test2__ to __test1__;: Allow __test1__ to set its role as __test2__.
\! Cls or \! Clear

Getting size of a table in postgres
SELECT pg_size_pretty(pg_total_relation_size('"schema_name"."table_name"'));

\l+ for listing size of database

SELECT
    table_name,
    pg_size_pretty(table_size) AS table_size,
    pg_size_pretty(indexes_size) AS indexes_size,
    pg_size_pretty(total_size) AS total_size
FROM (
    SELECT
        table_name,
        pg_table_size(table_name) AS table_size,
        pg_indexes_size(table_name) AS indexes_size,
        pg_total_relation_size(table_name) AS total_size
    FROM (
        SELECT ('"' || table_schema || '"."' || table_name || '"') AS table_name
        FROM information_schema.tables
    ) AS all_tables
    ORDER BY total_size DESC
) AS pretty_sizes;

SELECT
    table_name,
    pg_size_pretty(table_size) AS table_size,
    pg_size_pretty(indexes_size) AS indexes_size,
    pg_size_pretty(total_size) AS total_size
FROM (
    SELECT
        table_name,
        pg_table_size(table_name) AS table_size,
        pg_indexes_size(table_name) AS indexes_size,
        pg_total_relation_size(table_name) AS total_size
    FROM (
        SELECT ('"' || table_schema || '"."' || table_name || '"') AS table_name
        FROM information_schema.tables
    ) AS all_tables
    ORDER BY total_size DESC
) AS pretty_sizes
where table_name like '%information_schema%';

pg_dump -U postgres -Cs database > dump_file
SHOW search_path;
And to put the new schema in the path, you could use:
SET search_path TO myschema;
Or if you want multiple schemas:
SET search_path TO myschema, public;

From <https://stackoverflow.com/questions/34098326/how-to-select-a-schema-in-postgres-when-using-psql> 
